// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuroraPlusStakingAdminChanged extends ethereum.Event {
  get params(): AuroraPlusStakingAdminChanged__Params {
    return new AuroraPlusStakingAdminChanged__Params(this);
  }
}

export class AuroraPlusStakingAdminChanged__Params {
  _event: AuroraPlusStakingAdminChanged;

  constructor(event: AuroraPlusStakingAdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuroraPlusStakingBeaconUpgraded extends ethereum.Event {
  get params(): AuroraPlusStakingBeaconUpgraded__Params {
    return new AuroraPlusStakingBeaconUpgraded__Params(this);
  }
}

export class AuroraPlusStakingBeaconUpgraded__Params {
  _event: AuroraPlusStakingBeaconUpgraded;

  constructor(event: AuroraPlusStakingBeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Pending extends ethereum.Event {
  get params(): Pending__Params {
    return new Pending__Params(this);
  }
}

export class Pending__Params {
  _event: Pending;

  constructor(event: Pending) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Released extends ethereum.Event {
  get params(): Released__Params {
    return new Released__Params(this);
  }
}

export class Released__Params {
  _event: Released;

  constructor(event: Released) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StreamCreated extends ethereum.Event {
  get params(): StreamCreated__Params {
    return new StreamCreated__Params(this);
  }
}

export class StreamCreated__Params {
  _event: StreamCreated;

  constructor(event: StreamCreated) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get auroraAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StreamOwnerRewardReleased extends ethereum.Event {
  get params(): StreamOwnerRewardReleased__Params {
    return new StreamOwnerRewardReleased__Params(this);
  }
}

export class StreamOwnerRewardReleased__Params {
  _event: StreamOwnerRewardReleased;

  constructor(event: StreamOwnerRewardReleased) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StreamProposalCancelled extends ethereum.Event {
  get params(): StreamProposalCancelled__Params {
    return new StreamProposalCancelled__Params(this);
  }
}

export class StreamProposalCancelled__Params {
  _event: StreamProposalCancelled;

  constructor(event: StreamProposalCancelled) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StreamProposed extends ethereum.Event {
  get params(): StreamProposed__Params {
    return new StreamProposed__Params(this);
  }
}

export class StreamProposed__Params {
  _event: StreamProposed;

  constructor(event: StreamProposed) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get maxDepositAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get auroraDepositAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StreamRemoved extends ethereum.Event {
  get params(): StreamRemoved__Params {
    return new StreamRemoved__Params(this);
  }
}

export class StreamRemoved__Params {
  _event: StreamRemoved;

  constructor(event: StreamRemoved) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AuroraPlusStakingUpgraded extends ethereum.Event {
  get params(): AuroraPlusStakingUpgraded__Params {
    return new AuroraPlusStakingUpgraded__Params(this);
  }
}

export class AuroraPlusStakingUpgraded__Params {
  _event: AuroraPlusStakingUpgraded;

  constructor(event: AuroraPlusStakingUpgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AuroraPlusStaking__getStreamResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    return map;
  }

  getStreamOwner(): Address {
    return this.value0;
  }

  getRewardToken(): Address {
    return this.value1;
  }

  getAuroraDepositAmount(): BigInt {
    return this.value2;
  }

  getAuroraClaimedAmount(): BigInt {
    return this.value3;
  }

  getRewardDepositAmount(): BigInt {
    return this.value4;
  }

  getRewardClaimedAmount(): BigInt {
    return this.value5;
  }

  getMaxDepositAmount(): BigInt {
    return this.value6;
  }

  getLastTimeOwnerClaimed(): BigInt {
    return this.value7;
  }

  getRps(): BigInt {
    return this.value8;
  }

  getTau(): BigInt {
    return this.value9;
  }

  getStatus(): i32 {
    return this.value10;
  }
}

export class AuroraPlusStaking__getStreamScheduleResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getScheduleTimes(): Array<BigInt> {
    return this.value0;
  }

  getScheduleRewards(): Array<BigInt> {
    return this.value1;
  }
}

export class AuroraPlusStaking__startEndScheduleIndexResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStartIndex(): BigInt {
    return this.value0;
  }

  getEndIndex(): BigInt {
    return this.value1;
  }
}

export class AuroraPlusStaking__usersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDeposit(): BigInt {
    return this.value0;
  }

  getAuroraShares(): BigInt {
    return this.value1;
  }

  getStreamShares(): BigInt {
    return this.value2;
  }
}

export class AuroraPlusStaking extends ethereum.SmartContract {
  static bind(address: Address): AuroraPlusStaking {
    return new AuroraPlusStaking("AuroraPlusStaking", address);
  }

  AIRDROP_ROLE(): Bytes {
    let result = super.call("AIRDROP_ROLE", "AIRDROP_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_AIRDROP_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("AIRDROP_ROLE", "AIRDROP_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CLAIM_ROLE(): Bytes {
    let result = super.call("CLAIM_ROLE", "CLAIM_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CLAIM_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("CLAIM_ROLE", "CLAIM_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FOUR_YEARS(): BigInt {
    let result = super.call("FOUR_YEARS", "FOUR_YEARS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FOUR_YEARS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FOUR_YEARS", "FOUR_YEARS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_MONTH(): BigInt {
    let result = super.call("ONE_MONTH", "ONE_MONTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_MONTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_MONTH", "ONE_MONTH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PAUSE_ROLE(): Bytes {
    let result = super.call("PAUSE_ROLE", "PAUSE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSE_ROLE", "PAUSE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STREAM_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "STREAM_MANAGER_ROLE",
      "STREAM_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_STREAM_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STREAM_MANAGER_ROLE",
      "STREAM_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auroraToken(): Address {
    let result = super.call("auroraToken", "auroraToken():(address)", []);

    return result[0].toAddress();
  }

  try_auroraToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("auroraToken", "auroraToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAmountOfShares(streamId: BigInt, account: Address): BigInt {
    let result = super.call(
      "getAmountOfShares",
      "getAmountOfShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOfShares(
    streamId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOfShares",
      "getAmountOfShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestRewardPerShare(streamId: BigInt): BigInt {
    let result = super.call(
      "getLatestRewardPerShare",
      "getLatestRewardPerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return result[0].toBigInt();
  }

  try_getLatestRewardPerShare(streamId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestRewardPerShare",
      "getLatestRewardPerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPending(streamId: BigInt, account: Address): BigInt {
    let result = super.call(
      "getPending",
      "getPending(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPending(
    streamId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPending",
      "getPending(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReleaseTime(streamId: BigInt, account: Address): BigInt {
    let result = super.call(
      "getReleaseTime",
      "getReleaseTime(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReleaseTime(
    streamId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReleaseTime",
      "getReleaseTime(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardPerShare(streamId: BigInt): BigInt {
    let result = super.call(
      "getRewardPerShare",
      "getRewardPerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return result[0].toBigInt();
  }

  try_getRewardPerShare(streamId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardPerShare",
      "getRewardPerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardPerShareForUser(streamId: BigInt, account: Address): BigInt {
    let result = super.call(
      "getRewardPerShareForUser",
      "getRewardPerShareForUser(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardPerShareForUser(
    streamId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardPerShareForUser",
      "getRewardPerShareForUser(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardsAmount(streamId: BigInt, lastUpdate: BigInt): BigInt {
    let result = super.call(
      "getRewardsAmount",
      "getRewardsAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(lastUpdate)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardsAmount(
    streamId: BigInt,
    lastUpdate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardsAmount",
      "getRewardsAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(lastUpdate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStream(streamId: BigInt): AuroraPlusStaking__getStreamResult {
    let result = super.call(
      "getStream",
      "getStream(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return new AuroraPlusStaking__getStreamResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toI32()
    );
  }

  try_getStream(
    streamId: BigInt
  ): ethereum.CallResult<AuroraPlusStaking__getStreamResult> {
    let result = super.tryCall(
      "getStream",
      "getStream(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuroraPlusStaking__getStreamResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toI32()
      )
    );
  }

  getStreamClaimableAmount(streamId: BigInt, account: Address): BigInt {
    let result = super.call(
      "getStreamClaimableAmount",
      "getStreamClaimableAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStreamClaimableAmount(
    streamId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStreamClaimableAmount",
      "getStreamClaimableAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStreamOwnerClaimableAmount(streamId: BigInt): BigInt {
    let result = super.call(
      "getStreamOwnerClaimableAmount",
      "getStreamOwnerClaimableAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return result[0].toBigInt();
  }

  try_getStreamOwnerClaimableAmount(
    streamId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStreamOwnerClaimableAmount",
      "getStreamOwnerClaimableAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStreamSchedule(
    streamId: BigInt
  ): AuroraPlusStaking__getStreamScheduleResult {
    let result = super.call(
      "getStreamSchedule",
      "getStreamSchedule(uint256):(uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return new AuroraPlusStaking__getStreamScheduleResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getStreamSchedule(
    streamId: BigInt
  ): ethereum.CallResult<AuroraPlusStaking__getStreamScheduleResult> {
    let result = super.tryCall(
      "getStreamSchedule",
      "getStreamSchedule(uint256):(uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuroraPlusStaking__getStreamScheduleResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getStreamsCount(): BigInt {
    let result = super.call(
      "getStreamsCount",
      "getStreamsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStreamsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStreamsCount",
      "getStreamsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalAmountOfStakedAurora(): BigInt {
    let result = super.call(
      "getTotalAmountOfStakedAurora",
      "getTotalAmountOfStakedAurora():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalAmountOfStakedAurora(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAmountOfStakedAurora",
      "getTotalAmountOfStakedAurora():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasuryBalance(token: Address): BigInt {
    let result = super.call(
      "getTreasuryBalance",
      "getTreasuryBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTreasuryBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasuryBalance",
      "getTreasuryBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserShares(account: Address): BigInt {
    let result = super.call(
      "getUserShares",
      "getUserShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getUserShares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserShares",
      "getUserShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTotalDeposit(account: Address): BigInt {
    let result = super.call(
      "getUserTotalDeposit",
      "getUserTotalDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getUserTotalDeposit(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserTotalDeposit",
      "getUserTotalDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxWeight(): BigInt {
    let result = super.call("maxWeight", "maxWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxWeight", "maxWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minWeight(): BigInt {
    let result = super.call("minWeight", "minWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minWeight", "minWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): BigInt {
    let result = super.call("paused", "paused():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paused(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paused", "paused():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsSchedule(streamId: BigInt, start: BigInt, end: BigInt): BigInt {
    let result = super.call(
      "rewardsSchedule",
      "rewardsSchedule(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return result[0].toBigInt();
  }

  try_rewardsSchedule(
    streamId: BigInt,
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsSchedule",
      "rewardsSchedule(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startEndScheduleIndex(
    streamId: BigInt,
    start: BigInt,
    end: BigInt
  ): AuroraPlusStaking__startEndScheduleIndexResult {
    let result = super.call(
      "startEndScheduleIndex",
      "startEndScheduleIndex(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return new AuroraPlusStaking__startEndScheduleIndexResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_startEndScheduleIndex(
    streamId: BigInt,
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<AuroraPlusStaking__startEndScheduleIndexResult> {
    let result = super.tryCall(
      "startEndScheduleIndex",
      "startEndScheduleIndex(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuroraPlusStaking__startEndScheduleIndexResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalAmountOfStakedAurora(): BigInt {
    let result = super.call(
      "totalAmountOfStakedAurora",
      "totalAmountOfStakedAurora():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAmountOfStakedAurora(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAmountOfStakedAurora",
      "totalAmountOfStakedAurora():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAuroraShares(): BigInt {
    let result = super.call(
      "totalAuroraShares",
      "totalAuroraShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAuroraShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAuroraShares",
      "totalAuroraShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStreamShares(): BigInt {
    let result = super.call(
      "totalStreamShares",
      "totalStreamShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStreamShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStreamShares",
      "totalStreamShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  touchedAt(): BigInt {
    let result = super.call("touchedAt", "touchedAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_touchedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("touchedAt", "touchedAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  users(param0: Address): AuroraPlusStaking__usersResult {
    let result = super.call(
      "users",
      "users(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new AuroraPlusStaking__usersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_users(
    param0: Address
  ): ethereum.CallResult<AuroraPlusStaking__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuroraPlusStaking__usersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminDelegatecallCall extends ethereum.Call {
  get inputs(): AdminDelegatecallCall__Inputs {
    return new AdminDelegatecallCall__Inputs(this);
  }

  get outputs(): AdminDelegatecallCall__Outputs {
    return new AdminDelegatecallCall__Outputs(this);
  }
}

export class AdminDelegatecallCall__Inputs {
  _call: AdminDelegatecallCall;

  constructor(call: AdminDelegatecallCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AdminDelegatecallCall__Outputs {
  _call: AdminDelegatecallCall;

  constructor(call: AdminDelegatecallCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AdminPauseCall extends ethereum.Call {
  get inputs(): AdminPauseCall__Inputs {
    return new AdminPauseCall__Inputs(this);
  }

  get outputs(): AdminPauseCall__Outputs {
    return new AdminPauseCall__Outputs(this);
  }
}

export class AdminPauseCall__Inputs {
  _call: AdminPauseCall;

  constructor(call: AdminPauseCall) {
    this._call = call;
  }

  get flags(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AdminPauseCall__Outputs {
  _call: AdminPauseCall;

  constructor(call: AdminPauseCall) {
    this._call = call;
  }
}

export class AdminSstoreCall extends ethereum.Call {
  get inputs(): AdminSstoreCall__Inputs {
    return new AdminSstoreCall__Inputs(this);
  }

  get outputs(): AdminSstoreCall__Outputs {
    return new AdminSstoreCall__Outputs(this);
  }
}

export class AdminSstoreCall__Inputs {
  _call: AdminSstoreCall;

  constructor(call: AdminSstoreCall) {
    this._call = call;
  }

  get key(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminSstoreCall__Outputs {
  _call: AdminSstoreCall;

  constructor(call: AdminSstoreCall) {
    this._call = call;
  }
}

export class AdminSstoreWithMaskCall extends ethereum.Call {
  get inputs(): AdminSstoreWithMaskCall__Inputs {
    return new AdminSstoreWithMaskCall__Inputs(this);
  }

  get outputs(): AdminSstoreWithMaskCall__Outputs {
    return new AdminSstoreWithMaskCall__Outputs(this);
  }
}

export class AdminSstoreWithMaskCall__Inputs {
  _call: AdminSstoreWithMaskCall;

  constructor(call: AdminSstoreWithMaskCall) {
    this._call = call;
  }

  get key(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mask(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AdminSstoreWithMaskCall__Outputs {
  _call: AdminSstoreWithMaskCall;

  constructor(call: AdminSstoreWithMaskCall) {
    this._call = call;
  }
}

export class BatchClaimOnBehalfOfAnotherUserCall extends ethereum.Call {
  get inputs(): BatchClaimOnBehalfOfAnotherUserCall__Inputs {
    return new BatchClaimOnBehalfOfAnotherUserCall__Inputs(this);
  }

  get outputs(): BatchClaimOnBehalfOfAnotherUserCall__Outputs {
    return new BatchClaimOnBehalfOfAnotherUserCall__Outputs(this);
  }
}

export class BatchClaimOnBehalfOfAnotherUserCall__Inputs {
  _call: BatchClaimOnBehalfOfAnotherUserCall;

  constructor(call: BatchClaimOnBehalfOfAnotherUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get streamIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BatchClaimOnBehalfOfAnotherUserCall__Outputs {
  _call: BatchClaimOnBehalfOfAnotherUserCall;

  constructor(call: BatchClaimOnBehalfOfAnotherUserCall) {
    this._call = call;
  }
}

export class BatchClaimOnBehalfOfOtherUsersCall extends ethereum.Call {
  get inputs(): BatchClaimOnBehalfOfOtherUsersCall__Inputs {
    return new BatchClaimOnBehalfOfOtherUsersCall__Inputs(this);
  }

  get outputs(): BatchClaimOnBehalfOfOtherUsersCall__Outputs {
    return new BatchClaimOnBehalfOfOtherUsersCall__Outputs(this);
  }
}

export class BatchClaimOnBehalfOfOtherUsersCall__Inputs {
  _call: BatchClaimOnBehalfOfOtherUsersCall;

  constructor(call: BatchClaimOnBehalfOfOtherUsersCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get streamIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BatchClaimOnBehalfOfOtherUsersCall__Outputs {
  _call: BatchClaimOnBehalfOfOtherUsersCall;

  constructor(call: BatchClaimOnBehalfOfOtherUsersCall) {
    this._call = call;
  }
}

export class BatchMoveRewardsToPendingCall extends ethereum.Call {
  get inputs(): BatchMoveRewardsToPendingCall__Inputs {
    return new BatchMoveRewardsToPendingCall__Inputs(this);
  }

  get outputs(): BatchMoveRewardsToPendingCall__Outputs {
    return new BatchMoveRewardsToPendingCall__Outputs(this);
  }
}

export class BatchMoveRewardsToPendingCall__Inputs {
  _call: BatchMoveRewardsToPendingCall;

  constructor(call: BatchMoveRewardsToPendingCall) {
    this._call = call;
  }

  get streamIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BatchMoveRewardsToPendingCall__Outputs {
  _call: BatchMoveRewardsToPendingCall;

  constructor(call: BatchMoveRewardsToPendingCall) {
    this._call = call;
  }
}

export class BatchWithdrawCall extends ethereum.Call {
  get inputs(): BatchWithdrawCall__Inputs {
    return new BatchWithdrawCall__Inputs(this);
  }

  get outputs(): BatchWithdrawCall__Outputs {
    return new BatchWithdrawCall__Outputs(this);
  }
}

export class BatchWithdrawCall__Inputs {
  _call: BatchWithdrawCall;

  constructor(call: BatchWithdrawCall) {
    this._call = call;
  }

  get streamIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BatchWithdrawCall__Outputs {
  _call: BatchWithdrawCall;

  constructor(call: BatchWithdrawCall) {
    this._call = call;
  }
}

export class CancelStreamProposalCall extends ethereum.Call {
  get inputs(): CancelStreamProposalCall__Inputs {
    return new CancelStreamProposalCall__Inputs(this);
  }

  get outputs(): CancelStreamProposalCall__Outputs {
    return new CancelStreamProposalCall__Outputs(this);
  }
}

export class CancelStreamProposalCall__Inputs {
  _call: CancelStreamProposalCall;

  constructor(call: CancelStreamProposalCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelStreamProposalCall__Outputs {
  _call: CancelStreamProposalCall;

  constructor(call: CancelStreamProposalCall) {
    this._call = call;
  }
}

export class ClaimAllOnBehalfOfAnotherUserCall extends ethereum.Call {
  get inputs(): ClaimAllOnBehalfOfAnotherUserCall__Inputs {
    return new ClaimAllOnBehalfOfAnotherUserCall__Inputs(this);
  }

  get outputs(): ClaimAllOnBehalfOfAnotherUserCall__Outputs {
    return new ClaimAllOnBehalfOfAnotherUserCall__Outputs(this);
  }
}

export class ClaimAllOnBehalfOfAnotherUserCall__Inputs {
  _call: ClaimAllOnBehalfOfAnotherUserCall;

  constructor(call: ClaimAllOnBehalfOfAnotherUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimAllOnBehalfOfAnotherUserCall__Outputs {
  _call: ClaimAllOnBehalfOfAnotherUserCall;

  constructor(call: ClaimAllOnBehalfOfAnotherUserCall) {
    this._call = call;
  }
}

export class ClaimAllOnBehalfOfOtherUsersCall extends ethereum.Call {
  get inputs(): ClaimAllOnBehalfOfOtherUsersCall__Inputs {
    return new ClaimAllOnBehalfOfOtherUsersCall__Inputs(this);
  }

  get outputs(): ClaimAllOnBehalfOfOtherUsersCall__Outputs {
    return new ClaimAllOnBehalfOfOtherUsersCall__Outputs(this);
  }
}

export class ClaimAllOnBehalfOfOtherUsersCall__Inputs {
  _call: ClaimAllOnBehalfOfOtherUsersCall;

  constructor(call: ClaimAllOnBehalfOfOtherUsersCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimAllOnBehalfOfOtherUsersCall__Outputs {
  _call: ClaimAllOnBehalfOfOtherUsersCall;

  constructor(call: ClaimAllOnBehalfOfOtherUsersCall) {
    this._call = call;
  }
}

export class ClaimOnBehalfOfAnotherUserCall extends ethereum.Call {
  get inputs(): ClaimOnBehalfOfAnotherUserCall__Inputs {
    return new ClaimOnBehalfOfAnotherUserCall__Inputs(this);
  }

  get outputs(): ClaimOnBehalfOfAnotherUserCall__Outputs {
    return new ClaimOnBehalfOfAnotherUserCall__Outputs(this);
  }
}

export class ClaimOnBehalfOfAnotherUserCall__Inputs {
  _call: ClaimOnBehalfOfAnotherUserCall;

  constructor(call: ClaimOnBehalfOfAnotherUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get streamId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimOnBehalfOfAnotherUserCall__Outputs {
  _call: ClaimOnBehalfOfAnotherUserCall;

  constructor(call: ClaimOnBehalfOfAnotherUserCall) {
    this._call = call;
  }
}

export class CreateStreamCall extends ethereum.Call {
  get inputs(): CreateStreamCall__Inputs {
    return new CreateStreamCall__Inputs(this);
  }

  get outputs(): CreateStreamCall__Outputs {
    return new CreateStreamCall__Outputs(this);
  }
}

export class CreateStreamCall__Inputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateStreamCall__Outputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get aurora(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get streamOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get scheduleTimes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get scheduleRewards(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get tauAuroraStream(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _flags(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _treasury(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _maxWeight(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minWeight(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MoveAllRewardsToPendingCall extends ethereum.Call {
  get inputs(): MoveAllRewardsToPendingCall__Inputs {
    return new MoveAllRewardsToPendingCall__Inputs(this);
  }

  get outputs(): MoveAllRewardsToPendingCall__Outputs {
    return new MoveAllRewardsToPendingCall__Outputs(this);
  }
}

export class MoveAllRewardsToPendingCall__Inputs {
  _call: MoveAllRewardsToPendingCall;

  constructor(call: MoveAllRewardsToPendingCall) {
    this._call = call;
  }
}

export class MoveAllRewardsToPendingCall__Outputs {
  _call: MoveAllRewardsToPendingCall;

  constructor(call: MoveAllRewardsToPendingCall) {
    this._call = call;
  }
}

export class MoveRewardsToPendingCall extends ethereum.Call {
  get inputs(): MoveRewardsToPendingCall__Inputs {
    return new MoveRewardsToPendingCall__Inputs(this);
  }

  get outputs(): MoveRewardsToPendingCall__Outputs {
    return new MoveRewardsToPendingCall__Outputs(this);
  }
}

export class MoveRewardsToPendingCall__Inputs {
  _call: MoveRewardsToPendingCall;

  constructor(call: MoveRewardsToPendingCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MoveRewardsToPendingCall__Outputs {
  _call: MoveRewardsToPendingCall;

  constructor(call: MoveRewardsToPendingCall) {
    this._call = call;
  }
}

export class ProposeStreamCall extends ethereum.Call {
  get inputs(): ProposeStreamCall__Inputs {
    return new ProposeStreamCall__Inputs(this);
  }

  get outputs(): ProposeStreamCall__Outputs {
    return new ProposeStreamCall__Outputs(this);
  }
}

export class ProposeStreamCall__Inputs {
  _call: ProposeStreamCall;

  constructor(call: ProposeStreamCall) {
    this._call = call;
  }

  get streamOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get auroraDepositAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxDepositAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minDepositAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get scheduleTimes(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get scheduleRewards(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get tau(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ProposeStreamCall__Outputs {
  _call: ProposeStreamCall;

  constructor(call: ProposeStreamCall) {
    this._call = call;
  }
}

export class ReleaseAuroraRewardsToStreamOwnerCall extends ethereum.Call {
  get inputs(): ReleaseAuroraRewardsToStreamOwnerCall__Inputs {
    return new ReleaseAuroraRewardsToStreamOwnerCall__Inputs(this);
  }

  get outputs(): ReleaseAuroraRewardsToStreamOwnerCall__Outputs {
    return new ReleaseAuroraRewardsToStreamOwnerCall__Outputs(this);
  }
}

export class ReleaseAuroraRewardsToStreamOwnerCall__Inputs {
  _call: ReleaseAuroraRewardsToStreamOwnerCall;

  constructor(call: ReleaseAuroraRewardsToStreamOwnerCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReleaseAuroraRewardsToStreamOwnerCall__Outputs {
  _call: ReleaseAuroraRewardsToStreamOwnerCall;

  constructor(call: ReleaseAuroraRewardsToStreamOwnerCall) {
    this._call = call;
  }
}

export class RemoveStreamCall extends ethereum.Call {
  get inputs(): RemoveStreamCall__Inputs {
    return new RemoveStreamCall__Inputs(this);
  }

  get outputs(): RemoveStreamCall__Outputs {
    return new RemoveStreamCall__Outputs(this);
  }
}

export class RemoveStreamCall__Inputs {
  _call: RemoveStreamCall;

  constructor(call: RemoveStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get streamFundReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveStreamCall__Outputs {
  _call: RemoveStreamCall;

  constructor(call: RemoveStreamCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeOnBehalfOfAnotherUserCall extends ethereum.Call {
  get inputs(): StakeOnBehalfOfAnotherUserCall__Inputs {
    return new StakeOnBehalfOfAnotherUserCall__Inputs(this);
  }

  get outputs(): StakeOnBehalfOfAnotherUserCall__Outputs {
    return new StakeOnBehalfOfAnotherUserCall__Outputs(this);
  }
}

export class StakeOnBehalfOfAnotherUserCall__Inputs {
  _call: StakeOnBehalfOfAnotherUserCall;

  constructor(call: StakeOnBehalfOfAnotherUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeOnBehalfOfAnotherUserCall__Outputs {
  _call: StakeOnBehalfOfAnotherUserCall;

  constructor(call: StakeOnBehalfOfAnotherUserCall) {
    this._call = call;
  }
}

export class StakeOnBehalfOfOtherUsersCall extends ethereum.Call {
  get inputs(): StakeOnBehalfOfOtherUsersCall__Inputs {
    return new StakeOnBehalfOfOtherUsersCall__Inputs(this);
  }

  get outputs(): StakeOnBehalfOfOtherUsersCall__Outputs {
    return new StakeOnBehalfOfOtherUsersCall__Outputs(this);
  }
}

export class StakeOnBehalfOfOtherUsersCall__Inputs {
  _call: StakeOnBehalfOfOtherUsersCall;

  constructor(call: StakeOnBehalfOfOtherUsersCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get batchAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeOnBehalfOfOtherUsersCall__Outputs {
  _call: StakeOnBehalfOfOtherUsersCall;

  constructor(call: StakeOnBehalfOfOtherUsersCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeAllCall extends ethereum.Call {
  get inputs(): UnstakeAllCall__Inputs {
    return new UnstakeAllCall__Inputs(this);
  }

  get outputs(): UnstakeAllCall__Outputs {
    return new UnstakeAllCall__Outputs(this);
  }
}

export class UnstakeAllCall__Inputs {
  _call: UnstakeAllCall;

  constructor(call: UnstakeAllCall) {
    this._call = call;
  }
}

export class UnstakeAllCall__Outputs {
  _call: UnstakeAllCall;

  constructor(call: UnstakeAllCall) {
    this._call = call;
  }
}

export class UpdateTreasuryCall extends ethereum.Call {
  get inputs(): UpdateTreasuryCall__Inputs {
    return new UpdateTreasuryCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryCall__Outputs {
    return new UpdateTreasuryCall__Outputs(this);
  }
}

export class UpdateTreasuryCall__Inputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreasuryCall__Outputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
